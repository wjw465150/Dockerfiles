#requirepass 123456
 
pidfile /opt/redis/bin/redis.pid
logfile /opt/redis/log/redis.log
dir /opt/redis/db/
 
daemonize yes
port 6379
timeout 300
loglevel warning
databases 16
 
#内存大小对应关系  
# 1k => 1000 bytes  
# 1kb => 1024 bytes  
# 1m => 1000000 bytes  
# 1mb => 1024*1024 bytes  
# 1g => 1000000000 bytes  
# 1gb => 1024*1024*1024 bytes
 
#设置Redis占用内存的大小
maxmemory 1g
 
#如果内存满了就需要按照如相应算法进行删除过期的/最老的  
#volatile-lru 根据LRU算法移除设置了过期的key  
#allkeys-lru  根据LRU算法移除任何key(包含那些未设置过期时间的key)  
#volatile-random/allkeys->random 使用随机算法而不是LRU进行删除  
#volatile-ttl 根据Time-To-Live移除即将过期的key   
#noeviction   永不过期,而是报错  
maxmemory-policy volatile-lru  
 
#Redis并不是真正的LRU/TTL,而是基于采样进行移除的,即如采样10个数据移除其中最老的/即将过期的  
maxmemory-samples 10
 
#RDB持久化
#格式save seconds changes 即N秒变更N次则保存,从如下默认配置可以看到丢失数据的周期很长,通过save ""配置可以完全禁用此持久化
#save 900 1
#save 300 10
#save 60 10000
#RDB是否进行压缩,压缩耗CPU但是可以减少存储大小
#rdbcompression yes
#dbfilename dump.rdb
#appendonly no
 
#AOF持久化
appendonly yes
appendfilename appendonly.aof
#持久化策略,默认每秒fsync一次,也可以选择always即每次操作都进行持久化,或者no表示不进行持久化而是借助操作系统的同步将缓存区数据写到磁盘
appendfsync everysec
 
#AOF重写策略(同时满足如下两个策略进行重写)
#当AOF文件大小占到初始文件大小的多少百分比时进行重写
auto-aof-rewrite-percentage 100
#触发重写的最小文件大小
auto-aof-rewrite-min-size 64mb
 
#为减少磁盘操作,暂缓重写阶段的磁盘同步
no-appendfsync-on-rewrite no
