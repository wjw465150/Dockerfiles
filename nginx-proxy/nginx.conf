daemon off;

# 使用的用户和组
user  www www;
# 指定工作进程数(一般等于CPU总核数)
worker_processes  auto;

# 指定错误日志的存放路径,错误日志记录级别选项为:[debug | info | notic | warn | error | crit]
error_log  /var/log/nginx_error.log  error;

#指定pid存放的路径
#pid        /var/log/nginx.pid;

# 指定文件描述符数量
worker_rlimit_nofile 51200;

events {
    # 使用的网络I/O模型,Linux推荐epoll;FreeBSD推荐kqueue 
    use epoll;
    # 允许的最大连接数
    worker_connections  51200;
    multi_accept on;
}


http {
  server_tokens off;   #隐藏版本号
	
  include       mime.types;
  default_type  application/octet-stream;
  # 设置使用的字符集,如果一个网站有多重字符集,就不要随便设置;应让程序员在HTML代码中通过Meta标签设置
  #charset gb2312

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$upstream_addr"';

  access_log  /var/log/nginx_access.log  main;
  
  # 服务器名称哈希表的桶大小,该默认值取决于CPU缓存
  server_names_hash_bucket_size 128;
  # 客户端请求的Header头缓冲区大小
  client_header_buffer_size 32k;
  large_client_header_buffers 4 32k;

  # 启用sendfile()函数
  sendfile        on;
  tcp_nopush      on;
  tcp_nodelay     on;

  keepalive_timeout  65;

  # 开启gzip压缩
  gzip on;
  gzip_min_length 1k;
  gzip_buffers 4 16k;
  gzip_http_version 1.1;
  gzip_comp_level 5;
  gzip_types text/plain text/css text/javascript application/x-javascript application/xml application/x-shockwave-flash;
  gzip_vary on;
  
  # 定义限制区域,进行会话的并发连接数控制(例如: 限制每个IP的并发连接数)
  #1.1.8的旧语法 limit_zone zone_nameA $binary_remote_addr 10m;
  limit_conn_zone $binary_remote_addr zone=zone_nameA:10m;
  #指定一个会话最大的并发连接数。当超过指定的最发并发连接数时，服务器将返回 "Service unavailable" (503)
  limit_conn zone_nameA 30;
	limit_rate 600k;
  
  upstream tomcat {
    server UPSTREAM_ADDRESS:UPSTREAM_PORT;
    ip_hash;
    keepalive 300;
  }
         
  server {
    listen       SERVER_PORT;
    server_name  SERVER_NAME;

    #charset utf-8;

    #access_log  /var/log/nginx_SERVER_NAME.access.log  main;

    location / {
      root   html;
      index  index.html index.htm;

      proxy_pass                  http://tomcat;
      proxy_http_version          1.1;
      proxy_redirect              off;
      proxy_set_header            Host $host;
      proxy_set_header            X-Real-IP $remote_addr;
      proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header            Upgrade $http_upgrade;
      proxy_set_header            Connection "upgrade";  #1.4.3以下版本用: proxy_set_header            Connection $connection_upgrade;

      client_max_body_size        10m;
      client_body_buffer_size     128k;
      proxy_connect_timeout       90;
      proxy_send_timeout          90;
      proxy_read_timeout          90;
      proxy_buffer_size           8k;
      proxy_buffers               4 32k;
      proxy_busy_buffers_size     64k;  #如果系统很忙的时候可以申请更大的proxy_buffers 官方推荐*2
      proxy_temp_file_write_size  64k;  #proxy缓存临时文件的大小
    }
    
    #location /status {
    #  stub_status on;
    #  allow 127.0.0.1;
    #  #deny all;
    #  auth_basic "status";
    #  auth_basic_user_file /opt/nginx/conf/.htpasswd;
    #}

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #  proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #  root           html;
    #  fastcgi_pass   127.0.0.1:9000;
    #  fastcgi_index  index.php;
    #  fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #  include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #  deny  all;
    #}
    
    # opt-in to the future
    add_header "X-UA-Compatible" "IE=Edge,chrome=1";
    
  }


  # another virtual host using mix of IP-, name-, and port-based configuration
  #
  #server {
  #  listen       8000;
  #  listen       somename:8080;
  #  server_name  somename  alias  another.alias;

  #  location / {
  #    root   html;
  #    index  index.html index.htm;
  #  }
  #}


  # HTTPS server
  #
  server {
    listen       443;
    server_name  SERVER_NAME;

    ssl                  on;
    ssl_certificate      /opt/nginx/conf/nginx.crt;
    ssl_certificate_key  /opt/nginx/conf/nginx.key;

    ssl_session_timeout  5m;

    ssl_protocols  SSLv2 SSLv3 TLSv1;
    ssl_ciphers  ALL:!kEDH!ADH:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
    ssl_prefer_server_ciphers   on;

    #location / {
    #  root   html;
    #  index  index.html index.htm;
    #}
  
    location / {
      root   html;
      index  index.html index.htm;

      proxy_pass                  http://tomcat;
      proxy_http_version          1.1;
      proxy_redirect              off;
      proxy_set_header            Host $host;
      proxy_set_header            X-Real-IP $remote_addr;
      proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header            Upgrade $http_upgrade;
      proxy_set_header            Connection "upgrade";  #1.4.3以下版本用: proxy_set_header            Connection $connection_upgrade;
      
      client_max_body_size        10m;
      client_body_buffer_size     128k;
      proxy_connect_timeout       90;
      proxy_send_timeout          90;
      proxy_read_timeout          90;
      proxy_buffer_size           8k;
      proxy_buffers               4 32k;
      proxy_busy_buffers_size     64k;  #如果系统很忙的时候可以申请更大的proxy_buffers 官方推荐*2
      proxy_temp_file_write_size  64k;  #proxy缓存临时文件的大小
    }
  }

}
